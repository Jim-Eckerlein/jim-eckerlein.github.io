- title: 4-D Geometry Rendering
  github: pentachoron
  video: assets/Pentachoron.mp4
  description:
    An interactive mobile app to view 4-D geometry.
    Its viewport displays a 3-D slice of a 4-simplex (= Pentachoron).

    The current slice can be dragged, resulting in a morph-like effect.
    In addition, the 4-simplex can be rotated on the X-W plane.

    I used Flutter as the app's back-end. Since Flutter did not provide a 3d API at that time,
    the 3-D rendition is actually perspectivley projected into 2-D space, and then drawn using the standard API calls
    of Flutter's 2-D canvas.

- title: Mandelbrot fractals
  github: fractals
  video: assets/Vulkan-Fractals.mp4
  description:
    The classical fractal rendering demo, done with the Vulkan graphics API.

    The pixel shader interprets each pixel's location as a complex number and tests if a given function converges in a finite number of iterations.
    If it does, it is colored black in the viewport.
    Otherwise, it is color-coded according to the number of iterations it took the sequence to diverge.
    Increasing the number of iterations therefore leads to greater geometrical details.

    Since the renderer is based on 32 bit single-precision floating points, and zooming in at an exponential speed,
    the maximum precision is reached rather quickly, yielding visual artifacts.

- title: JavaScript mini IDE
  github: javascript-mini-ide
  video: assets/JavaScript-Shell.mp4
  description:
    A mobile app for editing and running JavaScript code.

    The source code parser is implemented in C++ and communicates to Java through the JNI.
    It finds the text positions of the highlights to be made, while the Java code decorates the text with text spans at the right spots.
    The code editor view is a subclass of EditText, but with the virtual keyboard disabled,
    since I made a completely custom one from scratch to better incorporate special symbols.

    V8 is used the run scripts.
    Some functions like printing or sleeping are predefined and execute Java code when called from JavaScript.
    To store user scripts, I implemented a file manager, saving the user's work on disk.
    The UI includes a list of available files and examples.
